#!/usr/bin/env bash

set -eou pipefail

stage=-1
stop_stage=100

# We assume that you have download the voc2007 dataset and mscoco2017 dataset.
# In prepare.sh, we mainly show the processes of downloading dataset and preparing 
# training, testing, finetuning data and format.
# Also, we will show how we download the backbone or not.
#       

dl_dir=$PWD/download

. shared/parse_options.sh || exit 1

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "dl_dir: $dl_dir"

if [ $stage -le -1 ] && [ $stop_stage -ge -1 ]; then
  log "Stage -1: Download mscoco2017 dataset and Unzip"
  # We assume that you have downloaded the mscoco2017 dataset, and unzip it.
  # wget https://openi.pcl.ac.cn/attachments/93afd342-e8ba-4dd2-bfce-d86046aec359?type=0
  # wget https://openi.pcl.ac.cn/attachments/f019428c-3794-42be-9eb4-f719191a0027?type=0
  # wget https://openi.pcl.ac.cn/attachments/33e8397c-60eb-4050-a44d-f82ffa3e8bc8?type=0
  # wget https://openi.pcl.ac.cn/attachments/d5ba4a08-9aa4-43b9-ab20-52d0aff8edf3?type=1
  # mkdir mscoco2017
  # unzip train2017.zip
  # unzip val2017.zip
  # unzip test2017.zip
  # unzip data.zip
  # mv train2017 mscoco2017
  # mv val2017 mscoco2017
  # mv test2017 mscoco2017
  # mv data/annotations mscoco2017
fi

if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "Stage 0: Download VOC2007 dataset and Unzip"
  # We assume that you have downloaded the VOC2007 dataset, and unzip it.
  # wget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtrainval_06-Nov-2007.tar
  # wget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtest_06-Nov-2007.tar
  # wget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCdevkit_08-Jun-2007.tar
  # tar xvf VOCtrainval_06-Nov-2007.tar
  # tar xvf VOCtest_06-Nov-2007.tar
  # tar xvf VOCdevkit_08-Jun-2007.tar
  
  # Here, we get the VOC2007 dataset directory as follows:
  # - /userhome/data/voc_2007_2012/VOC2007
  #   - Annotations  
  #   - ImageSets  
  #   - JPEGImages  
  #   - SegmentationClass  
  #   - SegmentationObject 
  #   - codes  
  #   - test
fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 1: combine voc2007, voc2012 and mscoco2017 data"
  # voc2007: train: 2501 images, val: 2510 images, trainval: 5011 images, test: 4952 images
  # voc2012: train: 5717 images, val: 5823 images, trainval: 11540 images, test: 11540 images
  # voc2007 and voc2012 trainval total: 16551 images, test: 16492 images
  mv ~/data/VOC2012/JPEGImages/* ~/data/VOC2007/JPEGImages/
  mv ~/data/VOC2012/Annotations/* ~/data/VOC2007/Annotations/
  mv ~/data/mscoco2017/train/images/* ~/data/VOC2007/JPEGImages/
fi

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 2: generate voc annotation file style for mscoco2017"
  # train and val
  python local/coco_annotation_to_voc_style.py
fi

if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
  log "Stage 3: prepare owod new split data setting"
  # this splitting method is based on ow-detr.
  # it is just based on mscoco2017.
  
  mkdir -p data/OWDETR/VOC2007/ImageSets/Main
  
  # create training and testing data for task 1.
  python local/owdetr_split/create_t1_imagesets.py

  # create training and testing data for task 2.
  python local/owdetr_split/create_t2_imagesets.py

  # create training and testing data for task 3.
  python local/owdetr_split/create_t3_imagesets.py

  # create training and testing data for task 4.
  python local/owdetr_split/create_t4_imagesets.py

  # create test data for all tasks (mscoco 2017 val)
  python local/owdetr_split/create_test_imagesets.py

  # create symlink for annotations and jpegimages
  ln -s ~/data/VOC/Annotations data/OWDETR/VOC2007/Annotations
  ln -s ~/data/VOC/JPEGImages data/OWDETR/VOC2007/JPEGImages

fi

if [ $stage -le 4 ] && [ $stop_stage -ge 4 ]; then
  log "Stage 4: generate fine-tune samples for each task (OWDETR)"
  # for owdetr splitting setting
  # also, if you want to compare with other methods, you can use the same finetune samples as them.
  # https://github.com/akshitac8/OW-DETR/tree/main/data/OWDETR/VOC2007/ImageSets
  python local/owdetr_split/balanced_ft.py

fi

if [ $stage -le 5 ] && [ $stop_stage -ge 5 ]; then
  log "Stage 5: prepare owod old split data setting"
  
  mkdir data/OWOD/VOC2007/ImageSets
  cp -r data/OWDETR/VOC2007/Annotations data/OWOD/VOC2007/
  cp -r data/OWDETR/VOC2007/JPEGImages data/OWOD/VOC2007/

  # create data for task 1 (OWOD)
  # here, we directly use the other existing txt files
  # about the task 1, the trainval data in voc2007 and voc2012 are used for t1_train.txt
  # the test data in voc2007 is used for t1_test.txt

  # create data for task 2
  python local/owod_split/create_t2_imagesets.py

  # create data for task 3
  python local/owod_split/create_t3_imagesets.py

  # create data for task 4
  python local/owod_split/create_t4_imagesets.py

  # combine all task test data
  cat t1_test.txt t2_test.txt t3_test.txt t4_test.txt > all_task_test.txt

fi

if [ $stage -le 6 ] && [ $stop_stage -ge 6 ]; then
  log "Stage 6: generate fine-tune samples for each task (OWOD)"
  # for owod splitting setting
  # also, if you want to compare with other methods, you can use the same finetune samples as them.
  # https://github.com/akshitac8/OW-DETR/tree/main/data/OWOD/VOC2007/ImageSets
  python local/owod_split/balanced_ft.py

fi

if [ $stage -le 7 ] && [ $stop_stage -ge 7 ]; then
  log "Stage 7: train, test and eval_metrics on owod new splits"
  # look at the related sh files
  # here, we provide two versions:
  # 1. the original sh, such as ow_detr_*_with_owdetr_split.sh
  # 2. the modified sh, such as run_*_with_owdetr_split.sh
fi

if [ $stage -le 8 ] && [ $stop_stage -ge 8 ]; then
  log "Stage 8: train, test and eval_metrics on owod old splits"
  # look at the related sh files
  # such as:
  # ow_detr_with_owod_split.sh
  # you also can useL
  # run_eval_owdetr_with_owod_split.sh (if not exist, you can create it by referring run_eval_*.sh)
fi